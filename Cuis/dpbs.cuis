DESIGN PRINCIPLES BEHIND SMALLTALK Dan Ingalls
LRG,Xerox PARC
(c) BYTE Magazine, August 1981.

	The purpose of the Smalltalk project is to provide computer support for the creative spirit in everyone. Our work flows from a vision that includes a creative individual and the best computing hardware available. We have chosen to concentrate on two principle areas of research: a language of description (programming language) that serves as an interface between the models in the human mind and those in computing hardware, and a language of interaction (user interface) that matches the human communication system to that of the computer.

	I'll start with a principle that is more social than technical and that is largely responsible for the particular bias of the Smalltalk project:

* PERSONAL MASTERY: If a system is to serve the creative spirit, it must be entirely comprehensible to a single individual.

	The point here is that the human potential manifests itself in individuals. To realize this potential, we must provide a medium that can be mastered by a single individual. Any barrier that exists between the user and some part of the system will eventually be a barrier to creative expression. Any part of the system that cannot be changed or that is not sufficiently general is a likely source of impediment.

* GOOD DESIGN: A system should be built with a minimum set of unchangeable parts; those parts should be as general as possible; and all parts of the system should be held in a uniform framework.

LANGUAGE 
    In designing a language for use with computers,everything we know about how people think and communicate is applicable. The mechanisms of human thought and communication have been engineered for millions of years, and we should respect them as being of sound design. Moreover, since we must work with this design for the next million years, it will save time if we make our computer models compatible with the mind, rather that the other way around.
	A person is presented as having a body and a mind. The body is the site of primary experience, and, in the context of this discussion, it is the physical channel through which the universe is perceived and through which intentions are carried out. Experience is recorded and processed in the mind. Creative thought (without going into its mechanism) can be viewed as the spontaneous appearance of information in the mind. Language is the key to that information:

* PURPOSE OF LANGUAGE: To provide a framework for communication.

	In human interaction, much of the actual communication is achieved through reference to shared context, and human language is built around such allusion. This is the case with computers as well. In the case of a computer, the 'body' provides for visual display of information and for sensing input from a human user. The 'mind' of a computer includes the internal memory and processing elements and their contents. Therefore, several different issues are involved in the design of a computer language:
	
* SCOPE: The design of a language for using computers must deal with internal models, external media, and the interaction between these in both the human and the computer.

	Smalltalk is not simply a better way of organizing procedures or a different technique for storage management. It is not just an extensible hierarchy of data types, or a graphical user interface. It is all of these things and anything else that is needed to support the interactions between humans and computers.

COMMUNICATING OBJECTS 
	    The mind observes a vast universe of experience, both immediate and recorded. One can derive a sense of oneness with the universe simply by letting this experience be, just as it is. However, if one wishes to participate, literally to take a part, in the universe, one must draw distinctions. In so doing one identifies an object in the universe, and simultaneously all the rest becomes not-that-object.
		Distinction by itself is a start, but the process of distinguishing does not get any easier. Every time you want to talk about 'that chair over there', you must repeat the entire processes of distinguishing that chair. This is where the act of reference comes in: we can associate a unique identifier with an object, and, from that time on, only the mention of that identifier is necessary to refer to the original object. 
		We have said that a computer system should provide models that are compatible with those in the mind. Therefore:
		
* OBJECTS: A computer language should support the concept of 'object' and provide a uniform means for referring to the objects in its universe.

	The Smalltalk storage manager provides an object-oriented model of memory for the entire system. Objects are created when expressions are evaluated, and they can be passed around by uniform reference, so that no provision for their storage is necessary in the procedures that manipulate them. When all references to an object have disappeared from the system, the object itself vanishes, and its storage is reclaimed. Such behavior is essential to full support of the object metaphor:
	
* STORAGE MANAGEMENT: To be truly 'object-oriented', a computer system must provide automatic storage management.

	A way to find out if a language is working well is to see if programs look like they are doing what they are doing. If they are sprinkled with statements that relate to the management of storage, then their internal model is not well matched to that of humans. Each object in our universe has a life of its own. Similarly, the brain provides for independent processing along with storage of each mental object. This suggests a third principle of design:
	
* MESSAGES: Computing should be viewed as an intrinsic capability of objects that can be uniformly invoked by sending messages.

	Just as programs get messy if object storage is dealt with explicitly, control in the system becomes complicated if processing is performed extrinsically. In Smalltalk an object sends the name of the desired operation, along with any arguments, as a message to another object, with the understanding that the receiver knows best how to carry out the desired operation. The transmission of messages is the only process that is carried on outside of objects and this is as it should be, since messages travel between objects. The principle of good design can be restated for languages: 
	
* UNIFORM METAPHOR: A language should be designed around a powerful metaphor that can be uniformly applied in all areas.

	Large applications are viewed in the same way as the fundamental units from which the system is built. In Smalltalk, the interaction between the most primitive objects is viewed in the same way as the highest-level interaction between the computer and its user. Every object in Smalltalk, even a lowly integer, has a set of messages, a protocol, that defines the explicit communication to which that object can respond. Internally, objects may have local storage and access to other shared information which comprise the implicit context of all communication.
	
	
ORGANIZATION 
	A uniform metaphor provides a framework in which complex systems can be built. Several related organizational principles contribute to the successful management of complexity. To begin with:
	
* MODULARITY: No component in a complex system should depend on the internal details of any other component.

	If there are N components in a system, then there are roughly N-squared potential dependencies between them. If computer systems are ever to be of assistance in complex human tasks, they must be designed to minimize such interdependence. The message-sending metaphor provides modularity by decoupling the intent of a message (embodied in its name) from the method used by the recipient to carry out the intent. Structural information is similarly protected because all access to the internal state of an object is through this same message interface.
	
	The complexity of a system can often be reduced by grouping similar components. Such grouping is achieved through classes in Smalltalk. A class describes other objects -- their internal state, the message protocol they recognize, and the internal methods for responding to those messages. The objects so described are called instances of that class. Even classes themselves fit into this framework; they are just instances of class Class, which describes the appropriate protocol and implementation for object description.
	
* CLASSIFICATION: A language must provide a means for classifying similar objects, and for adding new classes of objects on equal footing with the kernel classes of the system.

	Classification is the objectification of 'ness'ness. Such abstraction results from the marvelous ability of the mind to merge 'similar' experience, and this abstraction manifests itself as another object in the mind, the Platonic chair or chairness. Classes are the chief mechanism for extension in Smalltalk. The 'equal footing' clause of the above principle is important because it ensures that the system will be used as it was designed. At each stage of design, a human will naturally choose the most effective representation if the system provides for it. The principle of modularity has an interesting implication for the procedural components in a system:
	
* POLYMORPHISM: A program should specify only the behavior of objects, not their representation.

	A conventional statement of this principle is that a program should never declare that a given object is a SmallInteger or a LargeInteger, but only that it responds to integer protocol. Such generic description is crucial to models of the real world. 
	
* FACTORING: Each independent component in a system would appear in only one place.

	There are many reasons for this principle. First of all, it saves time, effort, and space if additions to the system need only be made in one place. Second, users can more easily locate a component that satisfies a given need. Third, in the absence of proper factoring, problems arise in synchronizing changes and ensuring that all interdependent components are consistent. You can see that a failure in factoring amounts to a violation of modularity. Smalltalk encourages well-factored designs through inheritance. Every class inherits behavior from its superclass. This inheritance extends through increasingly general classes, ultimately ending with class Object which describes the default behavior of all objects in the system. Inheritance illustrates a further pragmatic benefit of factoring:
	
* LEVERAGE: When a system is well factored, great leverage is available to users and implementers alike.

    Take the case of sorting an ordered collection of objects. In Smalltalk, the user would define a message called sort in the class OrderedCollection. When this has been done, all forms of ordered collections in the system will instantly acquire this new capability through inheritance. As an aside, it is worth noting that the same method can alphabetize text as well as sort numbers, since comparison protocol is recognized by the classes which support both text and numbers. 

	The benefits of structure for implementers are obvious. To begin with, there will be fewer primitives to implement. For instance, all graphics in Smalltalk are performed with a single primitive operation. With only one task to do, an implementer can bestow loving attention on every instruction, knowing that each small improvement in efficiency will be amplified throughout the system. It is natural to ask what set of primitive operations would be sufficient to support an entire computing system. The answer to this question is called a virtual machine specification:
	
* VIRTUAL MACHINE: A virtual machine specification establishes a framework for the application of technology.

	The Smalltalk virtual machine establishes an object-oriented model for storage, a message-oriented model for processing, and a bitmap model for visual display of information. Through the use of microcode, and ultimately hardware, system performance can be improved dramatically without any compromise to the other virtues of the system.

USER INTERFACE 
    A user interface is simply a language in which most of the communication is visual. Because visual presentation overlaps heavily with established human culture, esthetics plays a very important role in this area. Since all capability of a computer system is ultimately delivered through the user interface, flexibility is also essential here. An enabling condition for adequate flexibility of a user interface can be stated as an object-oriented principle:

* REACTIVE PRINCIPLE: Every component accessible to the user should be able to present itself in a meaningful way for observation and manipulation.

	This criterion is well supported by the model of communicating objects. By definition, each object provides an appropriate message protocol for interaction. This protocol is essentially a microlanguage particular to just that kind of object. At the level of the user interface, the appropriate language for each object on the screen is presented visually (as text, menus, pictures) and sensed through keyboard activity and the use of a pointing device. 
	
	It should be noted that operating systems seem to violate this principle. Here the programmer has to depart from an otherwise consistent framework of description, leave whatever context has been built up, and deal with an entirely different and usually very primitive environment. This need not be so:

* OPERATING SYSTEM: An operating system is a collection of things that don't fit into a language. There shouldn't be one.

	Here are some examples of conventional operating system components that have been naturally incorporated into the Smalltalk language:
	
* Storage management -- Entirely automatic. Objects are created by a message to their class and reclaimed when no further references to them exist. Expansion of the address space through virtual memory is similarly transparent.
* File system -- Included in the normal framework through objects such as Files and Directories with message protocols that support file access.
* Display handling -- The display is simply an instance of class Form, which is continually visible, and the graphical manipulation messages defined in that class are used to change the visible image.
* Keyboard Input -- The user input devices are similarly modeled as objects with appropriate messages for determining their state or reading their history as a sequence of events.
* Access to subsystems -- Subsystems are naturally incorporated as independent objects within Smalltalk: there they can draw on the large existing universe of description, and those that involve interaction with the user can participate as components in the user interface.
* Debugger -- The state of the Smalltalk processor is accessible as an instance of class Process that owns a chain of stack frames. The debugger is just a Smalltalk subsystem that has access to manipulate the state of a suspended process. It should be noted that nearly the only run-time error that can occur in Smalltalk is for a message not to be recognized by its receiver.

	Smalltalk has no 'operating system' as such. The necessary primitive operations, such as reading a page from the disk, are incorporated as primitive methods in response to otherwise normal Smalltalk messages.
	Computer systems are, in fact, getting simpler and, as a result, more usable. I would like to close with a general principle which governs this process:
	
* NATURAL SELECTION: Languages and systems that are of sound design will persist, to be supplanted only by better ones.

